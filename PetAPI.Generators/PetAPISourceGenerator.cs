using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Linq;
using System.Text;

namespace PetAPI.Generators
{
    [Generator]
    public class PetAPISourceGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var entityInterfaces = new[] { "IDog", "ICat" };

            var interfaceDeclarations = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (s, _) => s is InterfaceDeclarationSyntax,
                    transform: static (ctx, _) => ctx.SemanticModel.GetDeclaredSymbol((InterfaceDeclarationSyntax)ctx.Node))
                .Where(symbol => symbol is INamedTypeSymbol namedSymbol &&
                    entityInterfaces.Contains(namedSymbol.Name))
                .Collect();

            context.RegisterSourceOutput(interfaceDeclarations, (ctx, interfaceSymbols) =>
            {
                foreach (var symbol in interfaceSymbols) 
                {
                    if (symbol is INamedTypeSymbol interfaceSymbol)
                    {
                        var repositoryCode = GenerateRepository(interfaceSymbol);
                        ctx.AddSource($"{interfaceSymbol.Name.Substring(1)}Repository.g.cs", SourceText.From(repositoryCode, Encoding.UTF8));

                        var endpointsCode = GenerateEndpoints(interfaceSymbol);
                        ctx.AddSource($"{interfaceSymbol.Name.Substring(1)}Endpoints.g.cs", SourceText.From(endpointsCode, Encoding.UTF8));
                    }
                }

            });
        }
        #region generator methods
        private string GenerateRepository(INamedTypeSymbol interfaceSymbol)
        {
            var entityName = interfaceSymbol.Name.Substring(1);
            var className = $"{entityName}Repository";
            var dbSetName = $"{entityName}s";
            var dbContextName = "PetAPIContext";

            var code = new StringBuilder();
            code.AppendLine($$"""
                using Microsoft.EntityFrameworkCore;
                using {{interfaceSymbol.ContainingNamespace.ToDisplayString()}};

                //<auto-generated>
                //  This code is autogenerated by {{this.GetType().ToString()}}
                //</auto-generated>

                namespace PetAPI.Generated
                {
                    public class {{className}} : {{interfaceSymbol.Name}}
                    {                        
                        private readonly {{dbContextName}} context;

                        public {{className}}({{dbContextName}} context)
                        {
                            this.context = context;
                        }
                        
                """);
            foreach (var method in interfaceSymbol.GetMembers().OfType<IMethodSymbol>())
            { 
                var methodName = method.Name;
                var returnType = method.ReturnType.ToDisplayString();
                var parameters = string.Join(",", method.Parameters.Select(p => $"{p.Type.ToDisplayString()} {p.Name}"));

                code.AppendLine($"      public async {returnType} {methodName}({parameters}) =>");

                if (methodName == "GetAllAsync")
                    code.AppendLine($"          await context.{dbSetName}.ToListAsync();");

                else if (methodName == "GetByIdAsync")
                    code.AppendLine($"          await context.{dbSetName}.FirstOrDefaultAsync(x => x.Id == id);");
                
                else throw new NotImplementedException("Generator not setup for method");
                code.AppendLine("");
            }
            code.AppendLine("""
                    }
                }
                """);
            return code.ToString();
        }

        private string GenerateEndpoints(INamedTypeSymbol interfaceSymbol)
        {
            var entityName = interfaceSymbol.Name.Substring(1);
            var entityPlural = entityName.ToLower() + "s";
            var interfaceName = interfaceSymbol.ToDisplayString();

            var code = new StringBuilder();

            code.AppendLine($$"""
                using Microsoft.AspNetCore.Builder;

                //<auto-generated>
                //  This code is autogenerated by PetAPI.Generators.PetAPISourceGenerator
                //</auto-generated>

                namespace PetAPI.Generated;

                public static class {{entityName}}Endpoints
                {
                    public static void Map{{entityName}}Endpoints(this WebApplication app)
                    {
                        app.MapGet("/{{entityPlural}}", async ({{interfaceName}} repo) =>
                            await repo.GetAllAsync());

                        app.MapGet("/{{entityPlural}}/{{"{id}"}}", async ({{interfaceName}} repo, int id) =>
                            await repo.GetByIdAsync(id));
                    }
                }
                """);
            return code.ToString();
        }
        #endregion
    }
}
